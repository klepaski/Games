@using task6x.Models;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using task6x.Hubs;
@using task6x.Services;
@{
    ViewData["Title"] = "Crocodile";
    string role = ViewBag.Role;
    string username = ViewBag.UserName;
}

<div class="preGroupCreate">
    @if (role == "crocodile")
    {
        <h3 id="welcomeWords">You created game session. Wait for another player to join.</h3>
    }
</div>

<div class="row preGame" style="display: none;">
    <div class="welcomeGame">
        <h3 id="welcomeWords">Welcome to the 'Crocodile' game!</h3>
        <hr/>
        <h5><b>Rules:</b></h5>
        <h5>  ♥ Crocodile chooses the word and tries to draw it</h5>
        <h5>  ♥ Other players send their guesses to the chat</h5>
        <hr/>
        <img id="welcomePic" src="~/img/crocodile/welcome.PNG" />
    </div>

    <div class="preGameChoose">
        @if (role == "crocodile")
        {
            <div id="categorySection">
                <h3 id="welcomeWords">Please, choose the categories </h3>
                <p id="categories">
                    @foreach (var c in (Category[])Enum.GetValues(typeof(Category)))
                    {
                        <input type="checkbox" value="@c" /> @c<br/>
                    }
                </p>
                <button class="btn btn-pink col-md-3" id="sendCategoriesButton">Choose categories</button>
            </div>

            <div id="proposeAnswerSection" style="display: none;">
                <h3 id="welcomeWords">Please, choose the word </h3>
                <h3 id="proposedAnswer"></h3>
                <button class="btn btn-pink col-md-3" id="setAnswerButton">Choose word</button>
                <button class="btn btn-pink col-md-3" id="changeAnswerButton">Try another</button>
            </div>
        }
        else
        {
            <h3 id="welcomeWords">Please, wait while crocodile choose word to draw.</h3>
        }
    </div>
    
</div>



<div class="row game" style="display: none;">
    <div class="col-md-7">
        <canvas id='drawingpad' width='400' height='300'></canvas>
        @if (role == "crocodile")
        {
            <ul id="colors">
                <li style="background-color: black;">black</li>
                <li style="background-color: darkred;">darkred</li>
                <li style="background-color: red;">red</li>
                <li style="background-color: orangered;">orangered</li>
                <li style="background-color: orange;">orange</li>
                <li style="background-color: yellow;">yellow</li>
                <li style="background-color: lawngreen;">lawngreen</li>
                <li style="background-color: green;">green</li>
                <li style="background-color: deepskyblue;">deepskyblue</li>
                <li style="background-color: dodgerblue;">dodgerblue</li>
                <li style="background-color: blue;">blue</li>
                <li style="background-color: darkviolet;">darkviolet</li>
                <li style="background-color: blueviolet;">blueviolet</li>
                <li style="background-color: deeppink;">deeppink</li>
                <li style="background-color: mediumvioletred;">mediumvioletred</li>
                <li style="background-color: darkviolet;">darkviolet</li>
            </ul>
            <div><h3 id="answer"></h3></div>
        }
    </div>
    <div class="chat col-md-5">
        <h5>Chat Messages</h5>
        <div id="messages"></div>
        <div class="row" id="sendMessage">
            <input required id="message" class="col-md-9" placeholder="suggestion" />
            <button class="btn btn-pink col-md-3" id="sendMessageButton">Send</button>
        </div>
    </div>
</div>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.13/signalr.min.js"></script>

<script>
    var connection = new signalR.HubConnectionBuilder().withUrl("/Crocodile").build();
    var connection2 = new signalR.HubConnectionBuilder().withUrl("/GameSession?username=@username").build();
    var _group = "";

    connection2.on("ReceiveGroup", function (group, isGroupComplete) {
        _group = group;
        console.log(group);
        console.log(isGroupComplete);
        if (isGroupComplete) {
            $(".preGroupCreate").hide();
            $(".preGame").show();
        }
    });

    connection2.on("CloseGroup", function () {
        $(".preGroupCreate").hide();
        $(".preGame").hide();
        $(".game").show().html("<h3 id='welcomeWords'> Sorry, another player left the game.</h3>");
    });

    connection2.start().then(function () {
        connection.start().then(function () {
            if ("@role" == "crocodile") {
                canvas.addEventListener("mousedown", mousedown, false);
                canvas.addEventListener("mousemove", mousemove, false);
                canvas.addEventListener("mouseup", mouseup, false);
            }
            connection.invoke("SetGroup", _group);
        }).catch(function (err) { console.error(err.toString()); });
    }).catch(function (err) {console.error(err.toString());});

    // Drawing

    var drawGame = { isDrawing: false, startX: 0, startY: 0, };
    var data = { startX: 0, startY: 0, endX: 0, endY: 0 };
    var canvas = document.getElementById('drawingpad');
    var ctx = canvas.getContext('2d');
    var _currentColor = "#444";

    $('#colors li').click(function () {
        _currentColor = $(this).text();
    });

    connection.on("addLine", function (data, color) {
        drawLine(ctx, data.startX, data.startY, data.endX, data.endY, 1, color, _group);
    })

    function drawLine(ctx, x1, y1, x2, y2, thickness, color) {
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.lineWidth = thickness;
        ctx.strokeStyle = color;
        ctx.stroke();
    }

    function mousedown(e) {
        var mouseX = e.layerX || 0;
        var mouseY = e.layerY || 0;
        drawGame.startX = mouseX;
        drawGame.startY = mouseY;
        drawGame.isDrawing = true;
    };

    function mousemove(e) {
        if (drawGame.isDrawing) {
            var mouseX = e.layerX || 0;
            var mouseY = e.layerY || 0;
            if (!(mouseX == drawGame.startX &&
                mouseY == drawGame.startY)) {
                drawLine(ctx, drawGame.startX,
                    drawGame.startY, mouseX, mouseY, 1, _currentColor);
                data.startX = drawGame.startX;
                data.startY = drawGame.startY;
                data.endX = mouseX;
                data.endY = mouseY;
                connection.invoke("DrawLine", data, _currentColor, _group); //
                drawGame.startX = mouseX;
                drawGame.startY = mouseY;
            }
        }
    };

    function mouseup(e) {
        drawGame.isDrawing = false;
    }

    // Chat

    $("#sendMessageButton").click(function () {
        var message = $("#message").val();
        if (message != '') connection.invoke("SendMessage", message, "@role", "@username", _answer, _group);
        $("#message").val("").focus();
    });

    connection.on("ReceiveMessage", function (isAnswer, message, role, username) {
        if (role == "crocodile") {
            message = isAnswer ? "******" : message;
            var encodedMsg = "<div class='msg'><img src='/img/crocodile/crocodile.png'><p>" + message + "</p></div>";
        }
        else {
            var encodedMsg = "<div class='msg darker'><p class='right'><b>" + username + ":</b> " + message + "</p></div>";
        }
        $("#messages").append(encodedMsg);
        $("#messages").animate({ scrollTop: $("#messages").height() }, 'fast');

        if (isAnswer && role != "crocodile") {
            $("#messages").html("<h4>User <b>" + username + "</b> guessed the word \"" + message.toUpperCase() + "\"!</h4>");
            $("#sendMessage").hide();
        }
    });

    $('#message').keypress(function (event) {
        if (event.which == 13) {
            $("#sendMessageButton").click();
            return false;
        }
    });

    // Send categories and answer 

    var _words = [];
    var _answer = "";
    var i = 0;

    $("#sendCategoriesButton").click(function () {
        var checked = [];
        $('#categories input:checkbox:checked').each(function () {
            checked.push($(this).val());
        });
        if (checked.length > 0) {
            connection.invoke("SendCategories", checked);
            $('#categorySection').hide();
        }
        else alert("Please, choose at least one category");
    });

    connection.on("chooseAnswer", function (words) {
        _words = words;
        _answer = _words[0];
        $('#proposeAnswerSection').show();
        $('#proposedAnswer').text(_answer);
    });

    $("#changeAnswerButton").click(function () {
        i = (i < _words.length) ? i+1 : 0;
        _answer = _words[i];
        $('#proposedAnswer').text(_answer);
    });

    $("#setAnswerButton").on('click', function () {
        console.log("set answer button");
        connection.invoke("SetAnswer", _answer, _group);
    });

    connection.on("setAnswer", function (answer) {
        console.log('setAnswer');
        _answer = answer;
        $('.preGame').hide();
        $('.game').show();
        $('#answer').text(answer);
    });
</script>

